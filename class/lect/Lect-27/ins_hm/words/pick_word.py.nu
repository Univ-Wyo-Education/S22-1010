  1: import random
  2: 
  3: class Word:
  4: 
  5:     words = [ 
  6: "aardvark",
  7: "aardwolf",
  8: "abyssinian",
  9: "addax",
 10: "affenpinscher",
 11: "aidi",
 12: "ainu",
 13: "airedoodle",
 14: "akbash",
 15: "akita",
 16: "alabai",
 17: "albatross",
 18: "alligator",
 19: "alpaca",
 20: "alusky",
 21: "anaconda",
 22: "anchovies",
 23: "angelfish",
 24: "anglerfish",
 25: "ant",
 26: "anteater",
 27: "antelope",
 28: "ape",
 29: "arapaima",
 30: "armadillo",
 31: "armyworm",
 32: "asp",
 33: "aurochs",
 34: "aussiedoodle",
 35: "aussiedor",
 36: "avocet",
 37: "axolotl",
 38: "babirusa",
 39: "baboon",
 40: "badger",
 41: "baiji",
 42: "balinese",
 43: "bandicoot",
 44: "barb",
 45: "barbet",
 46: "barnacle",
 47: "barracuda",
 48: "bassador",
 49: "bassetoodle",
 50: "bat",
 51: "baya",
 52: "bea-Tzu",
 53: "beabull",
 54: "beagador",
 55: "beagle",
 56: "beaglier",
 57: "beago",
 58: "bear",
 59: "beaski",
 60: "beauceron",
 61: "beaver",
 62: "bee",
 63: "beefalo",
 64: "beetle",
 65: "bergamasco",
 66: "bernedoodle",
 67: "bichir",
 68: "bichpoo",
 69: "bilby",
 70: "binturong",
 71: "bird",
 72: "birman",
 73: "bison",
 74: "blobfish",
 75: "bloodhound",
 76: "bobcat",
 77: "bobolink",
 78: "boggle",
 79: "boiga",
 80: "bombay",
 81: "bongo",
 82: "bonobo",
 83: "booby",
 84: "boomslang",
 85: "borador",
 86: "bordoodle",
 87: "borkie",
 88: "bowfin",
 89: "boxador",
 90: "boxerdoodle",
 91: "boxfish",
 92: "boxsky",
 93: "boxweiler",
 94: "brittany",
 95: "brug",
 96: "budgerigar",
 97: "buffalo",
 98: "bulldog",
 99: "bullfrog",
100: "bullmastiff",
101: "bullsnake",
102: "bumblebee",
103: "burmese",
104: "butterfly",
105: "caecilian",
106: "caiman",
107: "camel",
108: "cantil",
109: "capybara",
110: "caracal",
111: "caribou",
112: "carp",
113: "cascabel",
114: "cassowary",
115: "cat",
116: "caterpillar",
117: "catfish",
118: "cavador",
119: "cavapoo",
120: "centipede",
121: "chameleon",
122: "chamois",
123: "chartreux",
124: "cheagle",
125: "cheetah",
126: "chickadee",
127: "chicken",
128: "chihuahua",
129: "chimaera",
130: "chimpanzee",
131: "chinchilla",
132: "chinook",
133: "chipmunk",
134: "chipoo",
135: "chiweenie",
136: "chorkie",
137: "cicada",
138: "cichlid",
139: "clownfish",
140: "coati",
141: "cockalier",
142: "cockapoo",
143: "cockatiel",
144: "cockatoo",
145: "cockroach",
146: "codfish",
147: "coelacanth",
148: "collie",
149: "copperhead",
150: "coral",
151: "corgidor",
152: "corgipoo",
153: "corkie",
154: "cottonmouth",
155: "cougar",
156: "cow",
157: "coyote",
158: "crab",
159: "crane",
160: "cricket",
161: "crocodile",
162: "crow",
163: "cuckoo",
164: "cuscus",
165: "cuttlefish",
166: "dachsador",
167: "dachshund",
168: "dalmadoodle",
169: "dalmador",
170: "dalmatian",
171: "danios",
172: "deer",
173: "dhole",
174: "dik-Dik",
175: "dingo",
176: "discus",
177: "dodo",
178: "dog",
179: "dolphin",
180: "donkey",
181: "dorgi",
182: "dorkie",
183: "dormouse",
184: "douc",
185: "doxiepoo",
186: "doxle",
187: "dragonfish",
188: "dragonfly",
189: "drever",
190: "duck",
191: "dugong",
192: "dunker",
193: "dunnock",
194: "eagle",
195: "earthworm",
196: "earwig",
197: "echidna",
198: "eel",
199: "eland",
200: "elephant",
201: "elk",
202: "emu",
203: "ermine",
204: "escolar",
205: "eskipoo",
206: "falcon",
207: "fangtooth",
208: "feist",
209: "ferret",
210: "firefly",
211: "fish",
212: "flamingo",
213: "flea",
214: "flounder",
215: "fly",
216: "fossa",
217: "fox",
218: "frenchton",
219: "frengle",
220: "frigatebird",
221: "frog",
222: "frogfish",
223: "gar",
224: "gazelle",
225: "gecko",
226: "genet",
227: "gerbil",
228: "gharial",
229: "gibbon",
230: "giraffe",
231: "glechon",
232: "gnat",
233: "goat",
234: "goberian",
235: "goldador",
236: "goldendoodle",
237: "goldfish",
238: "goose",
239: "gopher",
240: "gorilla",
241: "goshawk",
242: "grasshopper",
243: "greyhound",
244: "griffonshire",
245: "groenendael",
246: "grouper",
247: "grouse",
248: "guppy",
249: "haddock",
250: "hagfish",
251: "halibut",
252: "hamster",
253: "hare",
254: "harrier",
255: "havanese",
256: "havapoo",
257: "havashire",
258: "hedgehog",
259: "hellbender",
260: "heron",
261: "herring",
262: "himalayan",
263: "hippopotamus",
264: "hokkaido",
265: "hoopoe",
266: "horgi",
267: "hornbill",
268: "horse",
269: "horsefly",
270: "housefly",
271: "human",
272: "hummingbird",
273: "huntaway",
274: "huskador",
275: "huskita",
276: "husky",
277: "huskydoodle",
278: "hyena",
279: "ibex",
280: "ibis",
281: "iguana",
282: "impala",
283: "indri",
284: "insect",
285: "insects",
286: "jacana",
287: "jackabee",
288: "jackal",
289: "jackdaw",
290: "jackrabbit",
291: "jaguar",
292: "javanese",
293: "jellyfish",
294: "jerboa",
295: "junglefowl",
296: "kakapo",
297: "kangal",
298: "kangaroo",
299: "keeshond",
300: "kestrel",
301: "kingfisher",
302: "kinkajou",
303: "kishu",
304: "kiwi",
305: "koala",
306: "kodkod",
307: "kooikerhondje",
308: "kookaburra",
309: "koolie",
310: "krill",
311: "kudu",
312: "kuvasz",
313: "labahoula",
314: "labmaraner",
315: "labradane",
316: "labradoodle",
317: "labraheeler",
318: "ladybug",
319: "lamprey",
320: "leech",
321: "lemming",
322: "lemur",
323: "leonberger",
324: "leopard",
325: "lhasapoo",
326: "liger",
327: "lion",
328: "lionfish",
329: "lizard",
330: "lizardfish",
331: "llama",
332: "loach",
333: "lobster",
334: "locust",
335: "lorikeet",
336: "lowchen",
337: "lumpfish",
338: "lungfish",
339: "lynx",
340: "lyrebird",
341: "macaque",
342: "macaw",
343: "maggot",
344: "magpie",
345: "mallard",
346: "malteagle",
347: "maltese",
348: "maltipoo",
349: "mamba",
350: "manatee",
351: "mandrill",
352: "markhor",
353: "marmoset",
354: "marmot",
355: "massasauga",
356: "mastador",
357: "mastiff",
358: "mayfly",
359: "meagle",
360: "mealybug",
361: "meerkat",
362: "megalodon",
363: "miki",
364: "milkfish",
365: "millipede",
366: "mink",
367: "mole",
368: "molly",
369: "mongoose",
370: "mongrel",
371: "monkey",
372: "monkfish",
373: "moorhen",
374: "moose",
375: "morkie",
376: "mosquito",
377: "moth",
378: "mouse",
379: "mudi",
380: "mudpuppy",
381: "mule",
382: "muntjac",
383: "muskox",
384: "muskrat",
385: "narwhal",
386: "natterjack",
387: "neanderthal",
388: "nebelung",
389: "needlefish",
390: "newfoundland",
391: "newfypoo",
392: "newt",
393: "nightingale",
394: "nilgai",
395: "nudibranch",
396: "numbat",
397: "nyala",
398: "ocelot",
399: "octopus",
400: "okapi",
401: "olm",
402: "opossum",
403: "orang-utan",
404: "ostrich",
405: "otter",
406: "otterhound",
407: "owl",
408: "oyster",
409: "paddlefish",
410: "pademelon",
411: "pangolin",
412: "panther",
413: "papillon",
414: "parakeet",
415: "parrot",
416: "parrotfish",
417: "parrotlet",
418: "peacock",
419: "peagle",
420: "peekapoo",
421: "pekingese",
422: "pelican",
423: "penguin",
424: "persian",
425: "pheasant",
426: "pig",
427: "pigeon",
428: "pika",
429: "pipefish",
430: "piranha",
431: "pitador",
432: "pitsky",
433: "platypus",
434: "pointer",
435: "polecat",
436: "pomapoo",
437: "pomchi",
438: "pomeagle",
439: "pomeranian",
440: "pomsky",
441: "poochon",
442: "poodle",
443: "poogle",
444: "porcupine",
445: "porpoise",
446: "possum",
447: "potoo",
448: "potoroo",
449: "prawn",
450: "pronghorn",
451: "pudelpointer",
452: "pufferfish",
453: "puffin",
454: "pug",
455: "pugapoo",
456: "puggle",
457: "pugshire",
458: "puma",
459: "pumi",
460: "pyrador",
461: "pyredoodle",
462: "quagga",
463: "quail",
464: "quetzal",
465: "quokka",
466: "quoll",
467: "rabbit",
468: "raccoon",
469: "ragamuffin",
470: "ragdoll",
471: "raggle",
472: "rat",
473: "rattlesnake",
474: "reindeer",
475: "rhinoceros",
476: "robin",
477: "rockfish",
478: "rodents",
479: "rooster",
480: "rottsky",
481: "rottweiler",
482: "sable",
483: "saiga",
484: "salamander",
485: "salmon",
486: "saluki",
487: "sambar",
488: "samoyed",
489: "saola",
490: "sardines",
491: "sawfish",
492: "schipperke",
493: "schneagle",
494: "schnoodle",
495: "scorpion",
496: "seagull",
497: "seahorse",
498: "seal",
499: "serval",
500: "shark",
501: "sheep",
502: "sheepadoodle",
503: "shepadoodle",
504: "shepkita",
505: "shepweiler",
506: "shollie",
507: "shrew",
508: "shrimp",
509: "siamese",
510: "siberian",
511: "siberpoo",
512: "skunk",
513: "sloth",
514: "slug",
515: "snail",
516: "snake",
517: "snorkie",
518: "snowshoe",
519: "somali",
520: "spanador",
521: "sparrow",
522: "sparrowhawk",
523: "spider",
524: "sponge",
525: "springador",
526: "springbok",
527: "springerdoodle",
528: "squid",
529: "squirrel",
530: "squirrelfish",
531: "stabyhoun",
532: "starfish",
533: "stingray",
534: "stoat",
535: "stork",
536: "sturgeon",
537: "swan",
538: "takin",
539: "tamaskan",
540: "tang",
541: "tapir",
542: "tarpon",
543: "tarsier",
544: "termite",
545: "terrier",
546: "tetra",
547: "thrush",
548: "tick",
549: "tiffany",
550: "tiger",
551: "toadfish",
552: "torkie",
553: "tortoise",
554: "toucan",
555: "treecreeper",
556: "tropicbird",
557: "trout",
558: "tuatara",
559: "tuna",
560: "turkey",
561: "turtles",
562: "uakari",
563: "uguisu",
564: "umbrellabird",
565: "utonagan",
566: "vaquita",
567: "vicu√±a",
568: "vinegaroon",
569: "vizsla",
570: "vulture",
571: "wallaby",
572: "walrus",
573: "warthog",
574: "wasp",
575: "weasel",
576: "weimaraner",
577: "weimardoodle",
578: "westiepoo",
579: "whippet",
580: "whoodle",
581: "wildebeest",
582: "wolf",
583: "wolffish",
584: "wolverine",
585: "wombat",
586: "woodlouse",
587: "woodpecker",
588: "woodrat",
589: "worm",
590: "wrasse",
591: "xerus",
592: "yak",
593: "yoranian",
594: "yorkie-poo",
595: "zebra",
596: "zebu",
597: "zonkey",
598: "zorse",
599: "zuchon",
600: ]
601: 
602: 
603:     def __init__(self):
604:         self.word = ""
605:         self.letters_picked = ""
606:         self.n_incorrect_letters = 0
607:         self.n_success = 0
608: 
609:     # This function returns a random string from the passed list of strings.
610:     def getRandomWord(self, wordList):
611:         wordIndex = random.randint(0, len(wordList) - 1)
612:         return wordList[wordIndex]
613: 
614: 
615: # words.pick_words - pickSecretWord
616: #            showResults ()
617: #        dead = guessLetter ( opt )
618: 
619:     def showResults( self ) :
620:         print ( "" )
621:         if self.n_success >= len(self.word):
622:             print ( "!!!! Yea - you guesssed {} !!!!".format(self.word) )
623:             return
624:         if len(self.letters_picked ) == 0 :
625:             print ( "No Letters Picked" )
626:         else: 
627:             print ( "Letters Picked: {}".format(self.letters_picked ), end="" )
628:             s = ""
629:             for c in "abcdefghijklmnopqrstuvwxyz":
630:                 if c in self.letters_picked:
631:                     x = 1
632:                 else:
633:                     s = s + c
634:             print ( "    Letters Left: {}".format(s) )
635: 
636:         print("Word: ") 
637:         for c in self.word:
638:             if c in self.letters_picked:
639:                 print ( "{} ".format(c), end="" )
640:             else:
641:                 print ( "_ ", end="" )
642:         if self.n_success >= len(self.word):
643:             print ( "!!!! Yea - you guesssed {} !!!!".format(self.word) )
644:             return
645:         print("") 
646: 
647:     def guessLetter ( self, letter ) :
648:         if letter not in self.letters_picked:
649:             self.letters_picked = self.letters_picked + letter
650:         if letter in self.word:
651:             self.n_success += 1
652:         else:
653:             self.n_incorrect_letters += 1
654:         if self.n_incorrect_letters > 8:
655:             return True
656:         return False
657: 
658:     def getHint ( self ):
659:         for c in self.word:
660:             if c not in self.letters_picked:
661:                 self.letters_picked += c
662:                 self.n_success += 1
663:                 return
664: 
665:     def pickSecretWord ( self ) :
666:         print ( "I Picked a New Animal..." )
667:         self.word = self.getRandomWord(self.words)
668:         self.letters_picked = ""
669:         self.n_incorrect_letters = 0
670:         self.n_success = 0
671: 
672:     def getWord ( self ) :
673:         return self.word
674: 
675:     def nMistakes ( self ) :
676:         return self.n_incorrect_letters
677: 
678:     def nSuccess ( self ) :
679:         return self.n_success
680: 
681:     def youWon ( self ) :
682:         if self.n_success >= len(self.word):
683:             print ( "!!!! Yea - you guesssed {} !!!!".format(self.word) )
684:             return True
685:         return False
686: 
687:     def AlreadyPicked ( self, letter ):
688:         if letter in self.letters_picked:
689:             return True
690:         return False
691:  
692: 
693: # Test Code.
694: 
695: if __name__ == "__main__":
696:     ww = Word()
697:     ww.pickSecretWord( 'init' )
698:     print ( ww.wordPicked() )
699: 
700: 
